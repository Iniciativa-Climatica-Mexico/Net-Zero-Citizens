name: Build and Test

on:
  push:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
  create:

jobs:
  # Prevent File Change for Husky configuration
  prevent_change:
    name: CHECK IF HUSKY FILE IS MODIFIED
    runs-on: ubuntu-latest
    outputs:
      husky_file_modified: ${{ steps.check_file.outputs.husky_file_modified }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get all file changes
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Check if .husky files are modified
        id: check_file
        run: |
          if echo "${{ steps.changed_files.outputs.all }}" | grep -q ".husky/commit-msg"; then
           echo "true" > husky_file_modified.txt
          else 
            echo "false" > husky_file_modified.txt
          fi
        shell: bash

      - name: Set output from file
        id: set_output
        run: echo ::set-output name=husky_file_modified::$(cat husky_file_modified.txt)

  # Prevent File Change for Husky configuration
  prevent_file_change:
    name: PREVENT FILE CHANGE FOR HUSKY
    needs: prevent_change
    if: needs.prevent_change.outputs.husky_file_modified == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Prevent File Change
        uses: xalvarez/prevent-file-change-action@v1
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          pattern: ".husky/commit-msg"
          trustedAuthors: "drlangh"

  # Run yarn install when a branch is created
  yarn_install:
    name: YARN INSTALL FOR GIT HOOKS
    runs-on: ubuntu-latest
    if: github.event_name == 'create' && github.event.ref_type == 'branch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: "18.17.1"

      - name: Cache Node modules and Yarn cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.OS }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Husky Git Hooks
        run: yarn husky install

  # Security scan
  security_scan:
    name: SECURITY SCAN WITH SNYK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Android Vulnerability Scan
  android_app_sweep:
    name: ANDROID APP SWEEP
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Decrypt google-service.json
        run: |
          echo "${{ secrets.FIREBASE_ACCOUNT }}" | gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GPG_PASSPHRASE }}" --output google-services.json google-services.json.gpg

        working-directory: Android/GreenCircle/app

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Print Java Version
        run: javac -version

      - name: Change wrapper permissions
        run: chmod +x Android/GreenCircle/gradlew

      - name: Upload app to AppSweep with gradle
        working-directory: Android/GreenCircle
        run: ./gradlew uploadToAppSweepRelease
        env:
          APPSWEEP_API_KEY: ${{ secrets.APPSWEEP_API_KEY }}

  ## Android Linter test
  linter_test:
    name: ANDROID LINTER TEST
    runs-on: ubuntu-latest
    if: contains(github.ref, 'android/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Print Java Version
        run: javac -version

      - name: Change wrapper permissions
        run: chmod +x ./gradlew
        working-directory: Android/GreenCircle

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Linter test
        working-directory: Android/GreenCircle
        run: ./gradlew ktlintCheck

  # Android Test
  unit_test:
    name: ANDROID UNIT TEST
    runs-on: ubuntu-latest

    # Pipeline to continue Android Test Report Step
    continue-on-error: true
    if: contains(github.ref, 'android/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Decrypt google-service.json
        run: |
          echo "${{ secrets.FIREBASE_ACCOUNT }}" | gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GPG_PASSPHRASE }}" --output google-services.json google-services.json.gpg

        working-directory: Android/GreenCircle/app

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Print Java Version
        run: javac -version

      - name: Change wrapper permissions
        run: chmod +x ./gradlew
        working-directory: Android/GreenCircle
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Unit tests
        working-directory: Android/GreenCircle
        run: ./gradlew testDebugUnitTest --continue

      - name: Make unit test report
        uses: doanpt/AndroidTestReportAction@v1.0
        if: ${{ always() }} # Always run this step

      - name: Upload Unit Test Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-reports
          path: "**/build/reports/tests/"

  # Android Build
  apk_generate:
    name: ANDROID APK GENERATE
    runs-on: ubuntu-latest
    continue-on-error: true
    if: contains(github.ref, 'android/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Print Java Version
        run: javac -version
        working-directory: Android/GreenCircle

      - name: Change wrapper permissions
        run: chmod +x ./gradlew
        working-directory: Android/GreenCircle

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: List release
        run: ls -la Android/GreenCircle/app/release

      - name: Sign app APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: Android/GreenCircle/app/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

  backend_linter_test:
    name: BACKEND LINTER TEST
    runs-on: ubuntu-latest
    if: contains(github.ref, 'backend/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: "18.17.1"

      - name: Install dependencies
        working-directory: backend
        run: yarn install

      - name: Cache Node modules and Yarn cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.OS }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-

      - name: Run ESLint
        working-directory: backend
        run: yarn eslint --config .eslintrc.json .

  # Backend Testing with JEST
  node_test:
    name: BACKEND UNIT TESTS
    runs-on: ubuntu-latest
    if: contains(github.ref, 'backend/')  || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: "18.17.1"

      - name: Cache Node modules and Yarn cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.OS }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-

      - name: Install dependencies
        working-directory: backend
        run: yarn install

      - name: Run Mocha & Chai Test
        working-directory: backend
        run: yarn test
        env:
          JWT_AUTH: ${{ secrets.JWT_AUTH }}
          JWT_REFRESH: ${{ secrets.JWT_REFRESH }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          ECO_INFO_PAGE_ID: ${{ secrets.ECO_INFO_PAGE_ID }}
          ECO_INFO_TOKEN: ${{ secrets.ECO_INFO_TOKEN }}

      - name: Upload Mocha & Chai Test Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: mocha-chai-test-report
          path: ./test-results/test-report.xml

  # Admin panel linter test
  admin_linter_test:
    name: ADMIN PANEL LINTER TEST
    runs-on: ubuntu-latest
    if: contains(github.ref, 'Admin/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: "18.17.1"

      - name: Cache Node modules and Yarn cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.OS }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-

      - name: Install dependencies
        working-directory: Admin
        run: yarn install

      - name: Run ESLint
        working-directory: Admin
        run: yarn eslint --config .eslintrc.json .

  # Admin panel unit testing
  node_test_admin:
    name: ADMIN PANEL UNIT TESTS
    runs-on: ubuntu-latest
    if: contains(github.ref, 'Admin/')  || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/G')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: "18.17.1"

      - name: Cache Node modules and Yarn cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ runner.OS }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-

      - name: Install dependencies
        working-directory: Admin
        run: yarn install

      - name: Run Mocho & Chai Test
        working-directory: Admin
        run: yarn test

      - name: Upload Mocha & Chai Test Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: mocha-chai-test-report
          path: ./test-results/test-report.xml
